# Default values for gigmatch-monitoring
# This is a YAML-formatted file.

# Global configuration
global:
  namespaceOverride: "monitoring"
  nameOverride: "gigmatch-monitoring"

# Prometheus configuration
prometheus:
  enabled: true
  image:
    repository: prom/prometheus
    tag: "latest"
    pullPolicy: IfNotPresent
  
  service:
    type: ClusterIP
    port: 9090
  
  persistence:
    enabled: true
    size: 10Gi
    storageClass: ""
  
  resources:
    requests:
      memory: "256Mi"
      cpu: "250m"
    limits:
      memory: "512Mi"
      cpu: "500m"
  
  config:
    global:
      scrape_interval: 15s
      evaluation_interval: 15s
    
    scrape_configs:
      # Prometheus itself
      - job_name: 'prometheus'
        static_configs:
          - targets: ['localhost:9090']
      
      # Node Exporter
      - job_name: 'node-exporter'
        static_configs:
          - targets: ['node-exporter:9100']
      
      # MongoDB Exporter
      - job_name: 'mongodb-exporter'
        static_configs:
          - targets: ['mongodb-exporter:9216']
      
      # GigMatch Backend (using service discovery)
      - job_name: 'gigmatch-backend'
        kubernetes_sd_configs:
          - role: endpoints
        relabel_configs:
          - source_labels: [__meta_kubernetes_namespace]
            action: keep
            regex: gigmatch
          - source_labels: [__meta_kubernetes_service_name]
            action: keep
            regex: gigmatch-backend
          - source_labels: [__address__]
            target_label: __metrics_path__
            replacement: /metrics
        scrape_interval: 30s
      
      # GigMatch Frontend (if metrics endpoint is added later)
      - job_name: 'gigmatch-frontend'
        kubernetes_sd_configs:
          - role: endpoints
        relabel_configs:
          - source_labels: [__meta_kubernetes_namespace]
            action: keep
            regex: gigmatch
          - source_labels: [__meta_kubernetes_service_name]
            action: keep
            regex: gigmatch-frontend
          - source_labels: [__address__]
            target_label: __metrics_path__
            replacement: /metrics
        scrape_interval: 30s
      
      # Kubernetes API Server
      - job_name: 'kubernetes-apiservers'
        kubernetes_sd_configs:
          - role: endpoints
        scheme: https
        tls_config:
          ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
          insecure_skip_verify: true
        bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
        relabel_configs:
          - source_labels: [__meta_kubernetes_namespace, __meta_kubernetes_service_name, __meta_kubernetes_endpoint_port_name]
            action: keep
            regex: default;kubernetes;https
      
      # Kubernetes Nodes
      - job_name: 'kubernetes-nodes'
        kubernetes_sd_configs:
          - role: node
        scheme: https
        tls_config:
          ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
          insecure_skip_verify: true
        bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
        relabel_configs:
          - action: labelmap
            regex: __meta_kubernetes_node_label_(.+)

# Grafana configuration
grafana:
  enabled: true
  image:
    repository: grafana/grafana
    tag: "latest"
    pullPolicy: IfNotPresent
  
  service:
    type: ClusterIP
    port: 3000
  
  persistence:
    enabled: true
    size: 5Gi
    storageClass: ""
  
  resources:
    requests:
      memory: "256Mi"
      cpu: "250m"
    limits:
      memory: "512Mi"
      cpu: "500m"
  
  adminPassword: "admin123"
  allowSignUp: false
  
  # Pre-configure Prometheus as data source
  datasources:
    datasources.yaml:
      apiVersion: 1
      datasources:
        - name: Prometheus
          type: prometheus
          url: http://prometheus:9090
          access: proxy
          isDefault: true
  
  # Dashboard providers configuration
  dashboardProviders:
    dashboardproviders.yaml:
      apiVersion: 1
      providers:
        - name: 'default'
          orgId: 1
          folder: ''
          type: file
          disableDeletion: false
          editable: true
          options:
            path: /etc/grafana/provisioning/dashboards

# Node Exporter configuration
nodeExporter:
  enabled: true
  image:
    repository: prom/node-exporter
    tag: "latest"
    pullPolicy: IfNotPresent
  
  service:
    type: ClusterIP
    port: 9100
  
  resources:
    requests:
      memory: "64Mi"
      cpu: "100m"
    limits:
      memory: "128Mi"
      cpu: "200m"
  
  # DaemonSet configuration
  daemonSet:
    hostNetwork: true
    hostPID: true
    args:
      - '--path.procfs=/host/proc'
      - '--path.rootfs=/rootfs'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'

# MongoDB Exporter configuration
mongodbExporter:
  enabled: true
  image:
    repository: percona/mongodb_exporter
    tag: "0.20"
    pullPolicy: IfNotPresent
  
  service:
    type: ClusterIP
    port: 9216
  
  resources:
    requests:
      memory: "64Mi"
      cpu: "100m"
    limits:
      memory: "128Mi"
      cpu: "200m"
  
  # MongoDB connection string
  mongodbUri: "mongodb://mongodb.gigmatch.svc.cluster.local:27017"

# Ingress configuration
ingress:
  enabled: true
  className: "nginx"
  annotations:
    nginx.ingress.kubernetes.io/rewrite-target: /
    nginx.ingress.kubernetes.io/ssl-redirect: "false"
  
  hosts:
    - host: grafana.gigmatch.local
      paths:
        - path: /
          pathType: Prefix
    - host: prometheus.gigmatch.local
      paths:
        - path: /
          pathType: Prefix

# RBAC configuration
rbac:
  enabled: true
  create: true

# Service Account configuration
serviceAccount:
  create: true
  name: "gigmatch-monitoring"

# Security context
securityContext:
  runAsNonRoot: true
  runAsUser: 1000
  fsGroup: 1000

# Pod security context
podSecurityContext:
  runAsNonRoot: true
  runAsUser: 1000
  fsGroup: 1000 